---
title: Figure 1
jupyter: python3
---

```{python}
# | vscode: {languageId: python}
import anndata
import altair as alt
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np
import scanpy as sc
import decoupler as dc
import operator
from functools import reduce
from scipy.cluster.hierarchy import linkage, leaves_list

plt.rcParams["pdf.use14corefonts"] = False  # don't convert text to path


def altair_scale_mpl(scheme, **kwargs):
    """
    Use a continuous color scheme from mpl with altair
    """
    from matplotlib import cm
    from matplotlib.colors import to_hex

    return alt.Scale(
        range=[to_hex(x) for x in cm.get_cmap(scheme, 1000)(range(1000))], **kwargs
    )

def altair_scale(color_mapping, **kwargs):
    """
    Discrete color scale for altair based on our color definitions.
    """
    return alt.Scale(
        domain=list(color_mapping.keys()),
        range=list(color_mapping.values()),
        **kwargs,
    )

alt.data_transformers.disable_max_rows()

```

```{python}
# | vscode: {languageId: python}
adata = anndata.read_h5ad("../Data/luca-extended-cellxgene.h5ad")
genes_of_interest = pd.read_excel("../Metadata/gene_list.xlsx")
```

```{python}
# | vscode: {languageId: python}
# some patients from the Leader_Merad study are measured in multiple datasets. Let's exclude them from one of the datasets
EXCLUDE_DUPLICATE_SAMPLES = [
    {
        "donor_id": "Leader_Merad_2021_522",
        "dataset": "Leader_Merad_2021_10x_5p_v1_beads",
    },
    {
        "donor_id": "Leader_Merad_2021_581",
        "dataset": "Leader_Merad_2021_10x_3p_v2_beads_cite",
    },
    {
        "donor_id": "Leader_Merad_2021_695",
        "dataset": "Leader_Merad_2021_10x_3p_v2_digest-deadcell_cite",
    },
    {
        "donor_id": "Leader_Merad_2021_706",
        "dataset": "Leader_Merad_2021_10x_3p_v2_digest-deadcell_cite",
    },
]

obs_primary_tumor = adata.obs.loc[
    lambda x: x["disease"].isin(
        [
            "lung adenocarcinoma",
            "squamous cell lung carcinoma",
            "non-small cell lung carcinoma",
        ]
    )
    & (x["cell_type"] == "malignant cell")
    & (x["origin"] == "tumor_primary")
].loc[
    lambda x: ~reduce(
        operator.or_,
        [
            (x["donor_id"] == d["donor_id"]) & (x["dataset"] == d["dataset"])
            for d in EXCLUDE_DUPLICATE_SAMPLES
        ],
    )
]

selected_patients = (
    obs_primary_tumor.groupby("donor_id")
    .size()
    .reset_index(name="n_cells")
    .loc[lambda x: x["n_cells"] > 50]["donor_id"]
    .values
)
obs_selected_patients = obs_primary_tumor[
    lambda x: x["donor_id"].isin(selected_patients)
]
adata_selected_patients = adata[obs_selected_patients.index, :]

duplicate_patients = (
    adata_selected_patients.obs.loc[:, ["donor_id", "dataset"]]
    .drop_duplicates()
    .groupby("donor_id")
    .size()
    .reset_index(name="n_samples")
    .sort_values("n_samples", ascending=False)
    .loc[lambda x: x["n_samples"] > 1]["donor_id"]
    .tolist()
)
assert not len(duplicate_patients)
```

```{python}
# | vscode: {languageId: python}
tumor_cell_count = (
    obs_primary_tumor.loc[lambda x: x["donor_id"].isin(selected_patients)]
    .groupby(["donor_id", "cell_type_tumor", "disease"], observed=True)
    .size()
    .reset_index(name="n_cells")
    .assign(donor_id=lambda x: x["donor_id"].astype(str))
    .assign(disease=lambda x: x["disease"].map({
        "lung adenocarcinoma": "LUAD",
        "squamous cell lung carcinoma": "LUSC",
        "non-small cell lung carcinoma": "NSCLC NOS"
    }))
    .assign(cell_type_tumor=lambda x: x["cell_type_tumor"].map({
        "Tumor cells LUAD": "LUAD",
        "Tumor cells LUAD EMT": "LUAD",
        "Tumor cells LUAD MSLN": "LUAD",
        "Tumor cells LUAD NE": "LUAD",
        "Tumor cells LUAD mitotic": "LUAD",
        "Tumor cells LUSC": "LUSC",
        "Tumor cells LUSC mitotic": "LUSC",
        "Tumor cells NSCLC mixed": "NSCLC mixed"
    }))
)
```

```{python}
COLORS = {
    "disease": {
        "LUAD": "#1b9e77",
        "LUSC": "#7570b3",
        "NSCLC NOS": "#b3b3b3"
    },
    "cell_type_tumor": {
        "LUAD": "#1b9e77",
        "LUSC": "#7570b3",
        "NSCLC mixed": "#b3b3b3"
    }
}
```

```{python}
# | vscode: {languageId: python}
WIDTH = 800
order = (
    tumor_cell_count.groupby("donor_id")
    .apply(lambda x: x.assign(frac=x["n_cells"] / np.sum(x["n_cells"])))
    .loc[lambda x: x["cell_type_tumor"] == "LUSC"]
    .sort_values("frac", ascending=False)["donor_id"]
    .tolist()
)

ch_frac = (
    alt.Chart(tumor_cell_count)
    .mark_bar()
    .encode(
        x=alt.X(
            "donor_id:N",
            sort=order,
            axis=alt.Axis(labels=False, ticks=False, title=None),
        ),
        y=alt.Y("n_cells").stack("normalize"),
        color=alt.Color("cell_type_tumor", scale=altair_scale(COLORS["cell_type_tumor"])),
    )
    .properties(width=WIDTH, height=200)
)

ch_type = (
    alt.Chart(tumor_cell_count.assign(ylab="tumor type (histopathological)"))
    .mark_rect()
    .encode(
        x=alt.X(
            "donor_id:N",
            sort=order,
            axis=alt.Axis(labels=False, ticks=False, title=None),
        ),
        y=alt.Y("ylab", axis=alt.Axis(title=None)),
        color=alt.Color("disease", scale=altair_scale(COLORS["disease"])),
    )
    .properties(width=WIDTH)
)

alt.vconcat(ch_type, ch_frac).resolve_scale(color="independent")
```

```{python}
# | vscode: {languageId: python}
tmp_pb = dc.get_pseudobulk(adata_selected_patients, "donor_id", None, use_raw=True)
assert tmp_pb.shape[0] == len(selected_patients)
sc.pp.normalize_total(tmp_pb, target_sum=1e6)
sc.pp.log1p(tmp_pb)

sc.pp.regress_out(tmp_pb, keys="dataset")

tmp_pb.var.set_index("feature_name", inplace=True)

expr_df = (
    sc.get.obs_df(tmp_pb, ["donor_id"] + genes_of_interest["gene_symbol"].tolist())
    .melt(id_vars=["donor_id"], var_name="gene_symbol")
    .merge(genes_of_interest, how="inner", on="gene_symbol")
)
```

```{python}
# | vscode: {languageId: python}
charts = []
for group in expr_df["group"].unique():
    genes = expr_df["gene_symbol"].unique()
    genes_order = genes[
        leaves_list(
            linkage(tmp_pb[:, genes].X.T, method="complete", metric="correlation")
        )
    ].tolist()
    tmp_df = expr_df.loc[lambda x: x["group"] == group]
    charts.append(
        alt.Chart(tmp_df)
        .mark_rect()
        .encode(
            x=alt.X(
                "donor_id:N",
                sort=order,
                axis=alt.Axis(labels=False, ticks=False, title=None),
            ),
            y=alt.Y("gene_symbol", sort=genes_order),
            color=alt.Color(
                "value",
                scale=altair_scale_mpl("bwr", reverse=False, domain=[-3.5, 3.5]),
            ),
        )
        .properties(width=WIDTH, height=10 * tmp_df["gene_symbol"].nunique())
    )

ch = alt.vconcat(ch_type, ch_frac, alt.vconcat(*charts)).resolve_scale(
    color="independent"
)
ch
```

